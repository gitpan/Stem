#  File: DBI.pm

#  This file is part of Stem.
#  Copyright (C) 1999, 2000, 2001 Stem Systems, Inc.

#  Stem is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.

#  Stem is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.

#  You should have received a copy of the GNU General Public License
#  along with Stem; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

#  For a license to use the Stem under conditions other than those
#  described here, to purchase support for this software, or to purchase a
#  commercial warranty contract, please contact Stem Systems at:

#       Stem Systems, Inc.		781-643-7504
#  	79 Everett St.			info@stemsystems.com
#  	Arlington, MA 02474
#  	USA

use strict ;

use DBI ;

use Stem::Route qw( :cell ) ;
use Stem::Debug ;


my $attr_spec = [

	{
		'name'		=> 'reg_name',
		'help'		=> <<HELP,
HELP
	},

	{
		'name'		=> 'port',
		'required'	=> 1,
		'help'		=> <<HELP,
HELP
	},

	{
		'name'		=> 'host',
		'default'	=> 'localhost',
		'help'		=> <<HELP,
HELP
	},

	{
		'name'		=> 'db_type',
		'required'	=> 1,
		'help'		=> <<HELP,
HELP
	},
	{
		'name'		=> 'db_name',
		'required'	=> 1,
		'help'		=> <<HELP,
HELP
	},

	{
		'name'		=> 'user_name',
		'required'	=> 1,
		'help'		=> <<HELP,
HELP
	},

	{
		'name'		=> 'password',
		'required'	=> 1,
		'help'		=> <<HELP,
HELP
	},

	{
		'name'		=> 'statements',
		'required'	=> 1,
		'help'		=> <<HELP,
HELP
	},


] ;


sub new {

	my( $class ) = shift ;

	my $self = Stem::Class::parse_args( $attr_spec, @_ ) ;
	return $self unless ref $self ;

	return "statements is not an ARRAY ref"
			unless ref $self->{'statements'} eq 'ARRAY' ;

	if ( my $err = $self->db_connect() ) {

		return $err ;
	}

	if ( my $err = $self->prepare() ) {

		return $err ;
	}

	return $self ;
}

sub db_connect {

	my ( $self ) = @_ ;

	my $db_type = $self->{'db_type'} ;
	my $db_name = $self->{'db_name'} ;
	my $host = $self->{'host'} ;
	my $port = $self->{'port'} ;
	my $user_name = $self->{'user_name'} ;
	my $password = $self->{'password'} ;

	my $connect_arg = "DBI:$db_type:database=$db_name;host=$host" ;

	my $dbh = DBI->connect( $connect_arg, $user_name, $password ) ;

###############
# handle connect error
###############


	$self->{'dbh'} = $dbh ;

	return ;
}


sub prepare {

	my ( $self ) = @_ ;

	my %name2statement ;

	my $dbh = $self->{'dbh'} ;

	my $statements = $self->{'statements'} ;

	foreach my $statement ( @{$statements} ) {

		my $name = $statement->{'name'} ;

		return "statement is missing a name" unless $name ;

		my $sql = $statement->{'sql'} ;

		return "statement is missing sql" unless $sql ;

		my $sth = $dbh->prepare( $sql ) ;

##############
# handle prepare error
###############

		$statement->{'sth'} = $sth ;

		$name2statement{ $name } = $statement ;
	}

	$self->{'name2statement'} = \%name2statement ;

	return ;
}

sub execute_cmd {

	my( $self, $msg ) = @_ ;


	my $data = $msg->data() ;
	return "No message data" unless $data ;
	return "Message data is not a hash " unless ref $data eq 'HASH' ;

	my $statement_name = $data->{'statement'} ;
	my $sth = $self->{'name2statement'}{$statement_name} ;
	return "Unknown statement name" unless $sth ;

	my $args = $data->{'args'} || [] ;
	return "Statement arguments are not a list "
				 unless ref $args eq 'ARRAY' ;

	my $dbh = $self->{'dbh'} ;

	unless( $dbh->execute( @{$args} ) ) {

		return $dbh->errstr ;
	}

###############
# return arrayref_hash or arrayref_array. support selecting the type
# at the top level (default) and per statement.
###############

	return ;
}

1 ;
