# Copyright 2001 by Stem Systems, Inc. All rights reserved.

# If you have this software as part of the prototype release, you are
# not allowed to distribute any copies to anyone. This software is not
# to shown to anyone else without prior permission from Stem Systems.


package Stem::Gather ;

use strict ;

my %class_to_attr_name ;

my $attr_spec = [

	{
		'name'		=> 'object',
		'required'	=> 1,
		'type'		=> 'object',
		'help'		=> <<HELP,
Owner object to callback
HELP
	},

	{
		'name'		=> 'keys',
		'required'	=> 1,
		'type'		=> 'list',
		'help'		=> <<HELP,
List of keys to gather.
HELP
	},

	{
		'name'		=> 'gathered_method',
		'default'	=> 'gather_done',
		'help'		=> <<HELP,
Method to callback when all keys are gathered
HELP
	},

	{
		'name'		=> 'no_restart',
		'help'		=> <<HELP,
Do not start upon creation. A call to restart() must be made
HELP
	},

	{
		'name'		=> 'timeout',
		'help'		=> <<HELP,
Optional timeout period (in seconds)
HELP
	},

	{
		'name'		=> 'timeout_method',
		'default'	=> 'gather_timeout',
		'help'		=> <<HELP,
Method to callback when all timeout happened before all keys are gathered
HELP
	},

] ;


sub new {

	my( $class ) = shift ;

	my $self = Stem::Class::parse_args( $attr_spec, @_ ) ;
	return $self unless ref $self ;

	return 'Stem::Gather "keys" is not an array reference'
		unless ref $self->{'keys'} eq 'ARRAY' ;

	$self->restart() unless $self->{'no_start'} ;

	return( $self ) ;
}

sub restart {

	my( $self ) = @_ ;

	$self->{'gathered'} = 0 ;

	$self->{'keys_left'} = { map { $_, 1 } @{$self->{'keys'}} } ;

#print "GAT keys '@{$self->{'keys'}}'\n" ;

	$self->cancel_timeout() ;

	if ( my $timeout = $self->{'timeout'} ) {

		$self->{'timer_event'} = Stem::Event::Timer->new(
				'object'	=> $self,
				'delay'		=> $timeout, 
				'hard'		=> 1,
				'repeat'	=> 0 ) ;
	}
}

sub add_keys {

	my( $self, @keys ) = @_ ;

	push @{$self->{'keys'}}, @keys ;
}

sub gathered {

	my( $self, @keys ) = @_ ;

#print "gathered: @keys\n" ;

	return if $self->{'gathered'} ;

	delete @{$self->{'keys_left'}}{@keys} ;

	return if keys %{$self->{'keys_left'}} ;

	$self->cancel_timeout() ;
	$self->{'gathered'} = 1 ;

	my $method = $self->{'gathered_method'} ;
#print "gathered done: calling $method\n" ;

	return $self->{'object'}->$method() ;
}

sub timed_out {

	my( $self ) = @_ ;

	$self->cancel_timeout() ;

	my $method = $self->{'timeout_method'} ;
	$self->{'object'}->$method() ;

	return ;
}

sub cancel_timeout {

	my( $self ) = @_ ;

	if ( my $timer = $self->{'timer_event'} ) {
		$timer->cancel() ;

		delete $self->{'timer_event'} ;
	}
}

sub shut_down {

	my( $self ) = @_ ;

	$self->cancel_timeout() ;

	delete 	$self->{'object'} ;
}

1 ;
